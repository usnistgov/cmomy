# need this to pick up requires-python from pyproject.toml
extend = "./pyproject.toml"
extend-include = [
    "*.ipynb",
]
extend-exclude = [
    ".numba_cache",
    ".venv",
    "dist-conda",
    # "tests/",
    # "src/testpackage_book_nocli/tests",
    "examples/archived",
    "tests/test_typing_auto.py",
]
fix = true
# unsafe-fixes = true

[format]
docstring-code-format = true

[lint]
preview = true
select = [
    "ALL",
]
# fixable = ["ALL"]
unfixable = [
    "ERA",
    "PLR6104",
    "T",
]
ignore = [
    "ANN401",  # - Any ok sometimes
    "COM",     # - flake8-commas, formatter should take care of this?
    "CPY",     # - Don't require copyright
    "D105",    # - Missing magic method docstring
    "D107",    # - Missing docstring in __init__
    "D203",    # - 1 blank line required before class docstring
    "D212",    # - Multi-line docstring summary should start at the first line
    "E501",    # - line too long - let formatter fix this
    "E731",    # - do not assign a lambda expression, use a def
    "FBT",     # - bools are ok
    "PLC0415", # - import should be at top level (leads to issues with imports in func?)
    "TID252",  # - Allow relative imports
]
# Use extend-ignore for project specific ignores (avoid changing ignore directly)
extend-ignore = [
    # "ANN",     # - Annotations (just use mypy/pyright)
    # "D102",    # - Missing docstring in public method
    # "D103",    # - Missing docstring in public function
    # "D202",    # - blank line after docstring
    "D205", # - blank line after summary
    "D400", # - First line should end with a period
    "D401", # - First line of docstring should be in imperative mood: "{first_line}"
    # "D415",    # - First line should end with a period, question mark, or exclamation point
    # "D417",    # - Missing argument description in the docstring for {definition}: {name} (bad with docfiller)
    "DOC201", # - Missing return from documentation
    "DOC501", # - Missing raises from documentation
    # "DOC202",  # - Missing return from documentation
    # "E402",    # - module level import not at top of file
    # "ERA",     # - eradicate (want to keep some stuff)
    # "ISC",     # - flake8-implicit-str-concat
    # "NPY", # - not using numpy?
    # "SLF001",  # - flake8-self (private access sometimes OK)
    # "PD", # - not using pandas?
    # "PLR2004", # - numbers in comparison sometimes ok
    # "PLR0913", # - complexity sometimes ok
    # "PLR0917", # - complexity sometimes ok
]
isort.known-first-party = [
    "cmomy",
]
mccabe.max-complexity = 12
pydocstyle.convention = "numpy"
pylint.max-args = 15
pylint.max-branches = 15
pylint.max-positional-args = 15
pylint.max-public-methods = 30

[lint.per-file-ignores]
"**/*.ipynb" = [
    "B018",
    "D100",
    "INP001",
]
"docs/conf.py" = [
    "ERA",
    "INP001",
]
"noxfile.py" = [
    "RUF009",
]
"tests/*.py" = [
    "D",
    "S101",
]
"tools/*.py" = [
    "A",
    "D102",
    "DOC402",
    "S",
    "SLF001",
]

# Project specific ignores (avoid changing per-file-ignores directly)
# extend-per-file-ignores."path/to/file.py" = [ ... ]
[lint.extend-per-file-ignores]
"conftest.py" = [
    "ANN",
    "D",
]
"tests/*.py" = [
    "ANN",
    "DOC",
]
"**/*.ipynb" = [
    "ANN",
    "D103",
    "E302",
    "E305",
    "PD013",
    "PLR2004",
    "T201",
]
"src/**/*.py" = [
    "D102",
    "FIX002",
    "PLR2004",
    "TD003",
]
"src/**/_lib/*.py" = [
    "PLR0914",
    "S101",
]
"src/**/core/formatting.py" = [
    "ANN",
    "D",
    "SLF001",
]
"src/**/factory.py" = [
    "D",
]
"tests/**/*.py" = [
    "ANN",
    "FIX002",
    "N802",
    "N806",
    "PLC2701",
    "PLR2004",
    "PT011",
    "SLF001",
    "TD003",
]
"tests/test_typing.py" = [ "ERA" ]
