"""Create test_typing_auto.py file"""
from __future__ import annotations

import itertools
from dataclasses import dataclass, field

HEADER = """\
# This file is autogenerated.  Do not edit by hand.
from __future__ import annotations

import sys
from typing import TYPE_CHECKING, Any, cast

import numpy as np

from numpy import float32, float64

import xarray as xr

import cmomy
from cmomy import CentralMomentsArray, CentralMomentsXArray

MYPY_ONLY = True

if sys.version_info < (3, 11):
    from typing_extensions import assert_type
else:
    from typing import assert_type

if TYPE_CHECKING:
    from numpy.typing import ArrayLike, DTypeLike

    from cmomy.core.typing_compat import TypeVar
    from cmomy.core.typing import NDArrayAny, CentralMomentsArrayAny, CentralMomentsDataAny

    T = TypeVar("T")


from numpy.typing import NDArray


def check(
    actual: T,
    klass: type[Any],
    dtype: DTypeLike | None = None,
    obj_class: type[Any] | None = None,
) -> T:
    assert isinstance(actual, klass)
    if dtype is not None:
        assert actual.dtype is np.dtype(dtype)  # pyright: ignore[reportAttributeAccessIssue]

    if obj_class is None and klass is CentralMomentsArray:
        obj_class = np.ndarray

    if obj_class is not None:
        assert isinstance(actual.obj, obj_class)  # pyright: ignore[reportAttributeAccessIssue]
    return actual  # type: ignore[no-any-return]


# * Parameters
vals_float32: NDArray[np.float32] = np.zeros(10, dtype=np.float32)
vals_float64: NDArray[np.float64] = np.zeros(10, dtype=np.float64)
vals_arrayany: NDArray[Any] = cast("NDArray[Any]", vals_float64)
vals_arraylike: ArrayLike = cast("ArrayLike", vals_float64)
vals_any: Any = cast("Any", vals_float64)

data_float32: NDArray[np.float32] = np.zeros((10, 3), dtype=np.float32)
data_float64: NDArray[np.float64] = np.zeros((10, 3), dtype=np.float64)
data_arrayany: NDArray[Any] = cast("NDArray[Any]", data_float64)
data_arraylike: ArrayLike = cast("ArrayLike", data_float64)
data_any: Any = cast("Any", data_float64)

# For reduction
reduce_out_float32: NDArray[np.float32] = np.zeros(3, dtype=np.float32)
reduce_out_float64: NDArray[np.float64] = np.zeros(3, dtype=np.float64)
reduce_out_arrayany: NDArrayAny = np.zeros(3, dtype="f8")
reduce_out_any = cast("Any", np.zeros_like(reduce_out_float64))

# For transform
transform_out_float32: NDArray[np.float32] = np.zeros((10, 3), dtype=np.float32)
transform_out_float64: NDArray[np.float64] = np.zeros((10, 3), dtype=np.float64)
transform_out_arrayany: NDArrayAny = np.zeros((10, 3), dtype="f8")
transform_out_any = cast("Any", np.zeros_like(transform_out_float64))

# For group/resample
group_out_float32: NDArray[np.float32] = np.zeros((2, 3), dtype=np.float32)
group_out_float64: NDArray[np.float64] = np.zeros((2, 3), dtype=np.float64)
group_out_arrayany: NDArrayAny = np.zeros((2, 3), dtype="f8")
group_out_any = cast("Any", np.zeros_like(group_out_float64))

vals_dataarray = xr.DataArray(vals_float64, name="x")
vals_dataset = xr.Dataset({"x": vals_dataarray})
vals_dataarray_or_set: xr.DataArray | xr.Dataset = cast("xr.DataArray | xr.Dataset", vals_dataarray)
vals_dataarray_any: Any = cast("Any", vals_dataarray)
vals_dataset_any: Any = cast("Any", vals_dataset)

data_dataarray: xr.DataArray = xr.DataArray(data_float64, name="data")
data_dataset: xr.Dataset = xr.Dataset({"data": data_dataarray})
data_dataarray_any: Any = cast("Any", data_dataarray)
data_dataset_any: Any = cast("Any", data_dataset)
data_dataarray_or_sdata: xr.DataArray | xr.Dataset = cast("xr.DataArray | xr.Dataset", data_dataarray)


central_float32 = CentralMomentsArray(data_float32)
central_float64 = CentralMomentsArray(data_float64)
central_arraylike: CentralMomentsArrayAny = CentralMomentsArray(data_arraylike)
central_arrayany: CentralMomentsArrayAny = CentralMomentsArray(data_arrayany)
central_any: Any = CentralMomentsArray(data_any)

central_dataarray = CentralMomentsXArray(data_dataarray)
central_dataset = CentralMomentsXArray(data_dataset)
central_dataarray_any: CentralMomentsDataAny = CentralMomentsXArray(data_dataarray_any)
central_dataset_any: CentralMomentsDataAny = CentralMomentsXArray(data_dataset_any)
# ca_or_cs = cast("CentralMomentsXArray[xr.DataArray] | CentralMomentsXArray[xr.DataArray]", CentralMomentsXArray(data_dataarray_or_sdata))  # noqa: ERA001

freq = cmomy.random_freq(ndat=10, nrep=2)
by = [0] * 5 + [1] * 5
_, index, group_start, group_end = cmomy.reduction.factor_by_to_index(by)
"""

TEMPLATE_GENERAL_TEST = """\
    check(
        assert_type(
            {func_name}({data}{args}),
            {type_},
        ),
        {klass},
        {dtype},
        {second_klass},
    )\
"""


@dataclass
class GeneralTest:
    """General test creation"""

    func_name: str
    data: str
    args: str
    type_: str
    klass: str
    dtype: str
    second_klass: str = "None"
    template: str = field(default=TEMPLATE_GENERAL_TEST, repr=False)

    def __str__(self) -> str:
        return self.template.format_map(self.__dict__)

    @classmethod
    def from_params(
            cls,
            func_name: str,
            data: str,
            out_prefix: str | None,
            base_args: str,
            dtype_arg: str | None,
            out_dtype: str | None,
            type_: str,
            dtype: str,
            klass: str = "np.ndarray",
            second_klass: str = "None",
    ):

        args = base_args
        if args is not None:
            args = args.format_map({"axis_dim": "axis=0" if klass in {"np.ndarray", "CentralMomentsArray"} else 'dim="dim_0"'})

        if dtype_arg is not None:
            args = f"{args}, dtype={dtype_arg}"
        if out_dtype is not None:
            args = f"{args}, out={out_prefix}{out_dtype}"

        return cls(
            func_name=func_name,
            data=data,
            args=args,
            type_=type_,
            klass=klass,
            second_klass=second_klass,
            dtype=dtype,
        )

out = []


# func_name, data_prefix, out_prefix, "base_args"
funcs_genarraylike_to_genarraylike_dtype_out = [
    ("cmomy.reduce_data", "data_", "reduce_out_", ", {axis_dim}, mom_ndim=1"),
    ("cmomy.reduce_vals", "vals_", "reduce_out_", ", {axis_dim}, mom=2"),
    ("cmomy.reduce_data_grouped", "data_", "group_out_", ", {axis_dim}, mom_ndim=1, by=by"),
    ("cmomy.reduction.reduce_data_indexed", "data_", "group_out_", ", {axis_dim}, mom_ndim=1, index=index, group_start=group_start, group_end=group_end"),
    ("cmomy.resample_data", "data_", "group_out_", ", {axis_dim}, mom_ndim=1, freq=freq"),
    ("cmomy.resample_vals", "vals_", "group_out_", ", {axis_dim}, mom=2, freq=freq"),
    ("cmomy.resample.jackknife_data", "data_", "transform_out_", ", {axis_dim}, mom_ndim=1"),
    ("cmomy.resample.jackknife_vals", "vals_", "transform_out_", ", {axis_dim}, mom=2"),
    ("cmomy.convert.moments_type", "data_", "transform_out_", ", mom_ndim=1"),
    ("cmomy.convert.cumulative", "data_", "transform_out_", ", {axis_dim}, mom_ndim=1"),
    ("cmomy.utils.vals_to_data", "vals_", "transform_out_", ", mom=2"),
    ("cmomy.rolling.rolling_vals", "vals_", "transform_out_", ", {axis_dim}, mom=2, window=3"),
    ("cmomy.rolling.rolling_data", "data_", "transform_out_", ", {axis_dim}, mom_ndim=1, window=3"),
    ("cmomy.rolling.rolling_exp_vals", "vals_", "transform_out_", ", {axis_dim}, mom=2, alpha=0.2"),
]
funcs_genarraylike_to_genarraylike_dtype = [
    ("cmomy.convert.moments_to_comoments", "data_", None, ", mom=(1, -1)"),
]
funcs_genarray_to_genarray = [
    ("cmomy.utils.select_moment", "data_", None, ', "weight", mom_ndim=1'),
    ("cmomy.utils.assign_moment", "data_", None, ", weight=1, mom_ndim=1"),
    ("cmomy.bootstrap_confidence_interval", "data_", None, ', {axis_dim}, method="percentile"'),
]
funcs_genarraylike_to_wrapped_dtype_out = [
    ("cmomy.wrap_reduce_vals", "vals_", "reduce_out_", ", {axis_dim}, mom=2"),
    ("cmomy.wrap_raw", "data_", "transform_out_", ""),
]
funcs_genarraylike_to_wrapped_dtype = [
    ("cmomy.wrap", "data_", None, ""),
]
funcs_arraylike_to_class = [
    ("cmomy.CentralMomentsArray", "data_", None, ""),
]

funcs_xarray_to_class = [
    ("cmomy.CentralMomentsXArray", "data_", None, ""),
]
funcs_class_to_class = [
    ("cmomy.zeros_like", "central_", None, ""),
]


# * GenArray to GenArray
# ** Just arrays






# data_suffix, dtype_arg, out_dtype, type, dtype, klass, second_class
params_array = [
    ("float32", None, None, "NDArray[float32]", "float32"),
    ("float64", None, None, "NDArray[float64]", "float64"),
    ("arrayany", None, None, "NDArray[Any]", "float64"),
    ("any", None, None, "Any", "float64"),
]

params_arraylike = [
    *params_array,
    ("arraylike", None, None, "NDArray[Any]", "float64"),
]

params_xarray = [
    ("dataarray", None, None, "xr.DataArray", "float64", "xr.DataArray"),
    ("dataset", None, None, "xr.Dataset", None, "xr.Dataset"),
    ("dataarray_any", None, None, "Any", "float64", "xr.DataArray"),
    ("dataset_any", None, None, "Any", None, "xr.Dataset"),
]

params = [
    # no dtype specified
    *params_arraylike,
    *params_xarray,
]
params_dtype = [
    # with dtype
    ("float32", "float64", None, "NDArray[float64]", "float64"),
    ("float64", "float32", None, "NDArray[float32]", "float32"),
    ("arrayany", "float32", None, "NDArray[float32]", "float32"),
    ("arraylike", "float64", None, "NDArray[float64]", "float64"),
    ("any", "float32", None, "Any", "float32"),
    ("float32", '"f8"', None, "NDArray[Any]", "float64"),
    ("dataarray", "float32", None, "xr.DataArray", "float32", "xr.DataArray"),
    ("dataset", "float32", None, "xr.Dataset", None, "xr.Dataset"),
    ("dataarray_any", "float32", None, "Any", "float32", "xr.DataArray"),

]
params_out = [
    # with out
    ("float32", None, "float64", "NDArray[float64]", "float64"),
    ("float64", None, "float32", "NDArray[float32]", "float32"),
    ("arrayany", None, "float32", "NDArray[float32]", "float32"),
    ("arraylike", None, "float64", "NDArray[float64]", "float64"),
    ("any", None, "float32", "Any", "float32"),
    ("float32", None, "arrayany", "NDArray[Any]", "float64"),
    # ("float32", None, "any", "NDArray[Any]", "float64"),  # noqa: ERA001
    ("dataarray", None, "float32", "xr.DataArray", "float32", "xr.DataArray"),
    ("dataarray", None, "arrayany", "xr.DataArray", "float64", "xr.DataArray"),
    ("dataarray_any", None, "float32", "Any", "float32", "xr.DataArray"),
]
params_dtype_out = [
    # with out and dtype
    ("float32", "float32", "float64", "NDArray[float64]", "float64"),
    ("float64", "float64", "float32", "NDArray[float32]", "float32"),
    ("arrayany", "float64", "float32", "NDArray[float32]", "float32"),
    ("arraylike", "float32", "float64", "NDArray[float64]", "float64"),
    ("any", "float64", "float32", "Any", "float32"),
    ("float32", "float64", "arrayany", "NDArray[Any]", "float64"),
    # ("float32", "float64", "any", "NDArray[Any]", "float64"),  # noqa: ERA001
]
params_all = [*params, *params_dtype, *params_out, *params_dtype_out]
params_dtype_only = [*params, *params_dtype]


params_wrap_array = [
    ("float32", None, None, "CentralMomentsArray[float32]", "float32", "CentralMomentsArray"),
    ("float64", None, None, "CentralMomentsArray[float64]", "float64", "CentralMomentsArray"),
    ("arrayany", None, None, "CentralMomentsArray[Any]", "float64", "CentralMomentsArray"),
    ("arraylike", None, None, "CentralMomentsArray[Any]", "float64", "CentralMomentsArray"),
]

params_wrap_xarray = [
    ("dataarray", None, None, "CentralMomentsXArray[xr.DataArray]", "float64", "CentralMomentsXArray", "xr.DataArray"),
    ("dataset", None, None, "CentralMomentsXArray[xr.Dataset]", None, "CentralMomentsXArray", "xr.Dataset"),
]
params_any_wrap_array = [
    ("any", None, None, "Any", "float64", "CentralMomentsArray"),
]
params_any_wrap_xarray = [
    ("dataarray_any", None, None, "Any", "float64", "CentralMomentsXArray", "xr.DataArray"),
    ("dataset_any", None, None, "Any", None, "CentralMomentsXArray", "xr.Dataset"),
]
params_wrap = [
    *params_wrap_array,
    *params_wrap_xarray,
]
params_any_wrap = [
    *params_any_wrap_array,
    *params_any_wrap_xarray,
]
params_wrap_total = [*params_any_wrap, *params_wrap]


params_wrap_dtype_array = [
    ("float32", "float64", None, "CentralMomentsArray[float64]", "float64", "CentralMomentsArray"),
    ("arraylike", "float32", None, "CentralMomentsArray[float32]", "float32", "CentralMomentsArray"),
]
params_wrap_dtype_xarray = [
    ("dataarray", "float32", None, "CentralMomentsXArray[xr.DataArray]", "float32", "CentralMomentsXArray", "xr.DataArray"),
    ("dataset", "float32", None, "CentralMomentsXArray[xr.Dataset]", None, "CentralMomentsXArray", "xr.Dataset"),
]
params_any_wrap_dtype_array = [
    ("any", "float32", None, "Any", "float32", "CentralMomentsArray"),
]
params_any_wrap_dtype_xarray = [
    ("dataarray_any", "float32", None, "Any", "float32", "CentralMomentsXArray", "xr.DataArray"),
]
params_wrap_dtype = [
    *params_wrap_dtype_array, *params_wrap_dtype_xarray,
]
params_any_wrap_dtype = [
    *params_any_wrap_dtype_array,
    *params_any_wrap_dtype_xarray,
]
params_wrap_dtype_total = [*params_wrap_dtype, *params_any_wrap_dtype]


params_wrap_out_array = [
    ("float32", None, "float64", "CentralMomentsArray[float64]", "float64", "CentralMomentsArray"),
    ("float64", None, "float32", "CentralMomentsArray[float32]", "float32", "CentralMomentsArray"),
    ("arraylike", None, "float64", "CentralMomentsArray[float64]", "float64", "CentralMomentsArray"),
    ("float32", None, "arrayany", "CentralMomentsArray[Any]", "float64", "CentralMomentsArray"),
    # with out
    # ("float32", None, "any", "NDArray[Any]", "float64"),  # noqa: ERA001
]
params_wrap_out_xarray = [
    ("dataarray", None, "float32", "CentralMomentsXArray[xr.DataArray]", "float32", "CentralMomentsXArray", "xr.DataArray"),
    ("dataarray", None, "arrayany", "CentralMomentsXArray[xr.DataArray]", "float64", "CentralMomentsXArray", "xr.DataArray"),
]
params_wrap_out = [
    *params_wrap_out_array,
    *params_wrap_out_xarray,
]
params_any_wrap_out_array = [
    ("any", None, "float32", "Any", "float32", "CentralMomentsArray"),
]
params_any_wrap_out_xarray = [
    ("dataarray_any", None, "float32", "Any", "float32", "CentralMomentsXArray", "xr.DataArray"),
]
params_any_wrap_out = [
    *params_any_wrap_out_array,
    *params_any_wrap_out_xarray,
]
params_wrap_out_total = [
    *params_wrap_out, *params_any_wrap_out,
]


params_zeroslike_array = [
    *params_wrap_array,
    *params_any_wrap_array,
]
params_zeroslike_xarray = [
    *params_wrap_xarray,
    ("dataarray_any", None, None, '"CentralMomentsDataAny"', "float64", "CentralMomentsXArray", "xr.DataArray"),
    ("dataset_any", None, None, '"CentralMomentsDataAny"', None, "CentralMomentsXArray", "xr.Dataset"),
]
params_zeroslike = [
    *params_zeroslike_array,
    *params_zeroslike_xarray,
]

params_zeroslike_dtype_array = [
    *params_wrap_dtype_array,
    *params_any_wrap_dtype_array,
]

params_zeroslike_dtype_xarray = [
    *params_wrap_dtype_xarray,
    ("dataarray_any", "float32", None, '"CentralMomentsDataAny"', "float32", "CentralMomentsXArray", "xr.DataArray"),
]

params_zeroslike_dtype = [
    # with dtype
    *params_zeroslike_dtype_array,
    *params_zeroslike_dtype_xarray,
]


params_central_array = [
    *params_wrap_array,
    ("any", None, None, '"CentralMomentsArrayAny"', "float64", "CentralMomentsArray"),
]
params_central_dtype_array = [
    *params_wrap_dtype_array,
    ("any", "float32", None, "CentralMomentsArray[np.float32]", "float32", "CentralMomentsArray"),
]
params_central_xarray = [
    *params_wrap_xarray,
    ("dataarray_any", None, None, '"CentralMomentsDataAny"', "float64", "CentralMomentsXArray", "xr.DataArray"),
    ("dataset_any", None, None, '"CentralMomentsDataAny"', None, "CentralMomentsXArray", "xr.Dataset"),
]


params_moveaxis = [
    ("float32", None, None, "NDArray[float32]", "float32"),
    ("float64", None, None, "NDArray[float64]", "float64"),
    ("arrayany", None, None, "NDArray[Any]", "float64"),
    ("any", None, None, "Any", "float64"),
    ("dataarray", None, None, "xr.DataArray", "float64", "xr.DataArray"),
    ("dataarray_any", None, None, "Any", "float64", "xr.DataArray"),
]



for (dtype_seq, func_name, data_prefix, out_prefix, base_args) in [
        (params_all, "cmomy.reduce_data", "data_", "reduce_out_", ", {axis_dim}, mom_ndim=1"),
        (params_all, "cmomy.reduce_vals", "vals_", "reduce_out_", ", {axis_dim}, mom=2"),
        (params_all, "cmomy.reduce_data_grouped", "data_", "group_out_", ", {axis_dim}, mom_ndim=1, by=by"),
        (params_all, "cmomy.reduction.reduce_data_indexed", "data_", "group_out_", ", {axis_dim}, mom_ndim=1, index=index, group_start=group_start, group_end=group_end"),
        (params_all, "cmomy.resample_data", "data_", "group_out_", ", {axis_dim}, mom_ndim=1, freq=freq"),
        (params_all, "cmomy.resample_vals", "vals_", "group_out_", ", {axis_dim}, mom=2, freq=freq"),
        (params_all, "cmomy.resample.jackknife_data", "data_", "transform_out_", ", {axis_dim}, mom_ndim=1"),
        (params_all, "cmomy.resample.jackknife_vals", "vals_", "transform_out_", ", {axis_dim}, mom=2"),
        (params_all, "cmomy.convert.moments_type", "data_", "transform_out_", ", mom_ndim=1"),
        (params_all, "cmomy.convert.cumulative", "data_", "transform_out_", ", {axis_dim}, mom_ndim=1"),
        ([*params, *params_dtype], "cmomy.convert.moments_to_comoments", "data_", None, ", mom=(1, -1)"),
        (params_all, "cmomy.utils.vals_to_data", "vals_", "transform_out_", ", mom=2"),
        ([*params_array, *params_xarray], "cmomy.utils.select_moment", "data_", None, ', "weight", mom_ndim=1'),
        ([*params_array, *params_xarray], "cmomy.utils.assign_moment", "data_", None, ", weight=1, mom_ndim=1"),
        (params_all, "cmomy.rolling.rolling_vals", "vals_", "transform_out_", ", {axis_dim}, mom=2, window=3"),
        (params_all, "cmomy.rolling.rolling_data", "data_", "transform_out_", ", {axis_dim}, mom_ndim=1, window=3"),
        (params_all, "cmomy.rolling.rolling_exp_vals", "vals_", "transform_out_", ", {axis_dim}, mom=2, alpha=0.2"),
        (params_all, "cmomy.rolling.rolling_exp_data", "data_", "transform_out_", ", {axis_dim}, mom_ndim=1, alpha=0.2"),
        (params_moveaxis, "cmomy.moveaxis", "data_", None, ", 0, 1"),
        ([*params_array, *params_xarray], "cmomy.bootstrap_confidence_interval", "data_", None, ', {axis_dim}, method="percentile"'),
        ([*params_wrap_total, *params_wrap_dtype_total], "cmomy.wrap", "data_", None, ""),
        ([*params_wrap_total, *params_wrap_dtype_total, *params_wrap_out_total], "cmomy.wrap_reduce_vals", "vals_", "reduce_out_", ", {axis_dim}, mom=2"),
        ([*params_wrap_total, *params_wrap_dtype_total, *params_wrap_out_total], "cmomy.wrap_raw", "data_", "transform_out_", ""),
        ([*params_zeroslike, *params_zeroslike_dtype], "cmomy.zeros_like", "central_", None, ""),
        ([*params_central_array, *params_central_dtype_array], "cmomy.CentralMomentsArray", "data_", None, ""),
        (params_central_xarray, "cmomy.CentralMomentsXArray", "data_", None, ""),
]:

    if len(set(dtype_seq)) != len(dtype_seq):
        print(func_name, len(dtype_seq), len(set(dtype_seq)))

    for (data_suffix, *args) in dtype_seq:
        out.append(str(
            GeneralTest.from_params(func_name, data_prefix + data_suffix, out_prefix, base_args, *args)
        ))




# Special for zeros....


# Special for concat
for (dtype_seq, func_name, data_prefix, out_prefix, base_args) in [
        (params_array, "cmomy.convert.concat", "data_", "reduce_out_", ", {axis_dim}"),
]:
    for (data_suffix, *args) in dtype_seq:
        d = data_prefix + data_suffix
        out.append(str(
            GeneralTest.from_params(
                func_name,
                f"({d}, {d})",
                out_prefix,
                base_args,
                *args
            )
        ))


# data_suffix =
# GeneralTest(
#     func_name="convert.concat",
#     data="({data_prefix}{data_suffix}, {data_prefix}{data_suffix})",
#     args=", {axis_dim}",
#     type_=

# )






xx = itertools.chain([HEADER, "\ndef test_numpy_funcs() -> None:"], out)
with open("./tests/test_typing_auto.py", "w", encoding="utf-8") as f:  # noqa: FURB103, PTH123
    f.write("\n".join(xx))
