[build-system]
build-backend = "uv_build"
requires = [
    "uv-build>=0.8.22,<0.9.0",
]

[project]
name = "cmomy"
version = "1.0.2.dev0"
description = "Central (co)moment calculation/manipulation"
readme = "README.md"
keywords = [
    "cmomy",
]
license = "NIST-PD"
license-files = [ "LICENSE" ]
authors = [
    { name = "William P. Krekelberg", email = "wpk@nist.gov" },
]
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    "docstring-inheritance",
    "lazy-loader",
    "module-utilities>=0.10.1",
    "numba>=0.58",
    "numpy>1.24",
    "typing-extensions>=4.10.0",
    "xarray>=2023.9.0",
]
urls.Documentation = "https://pages.nist.gov/cmomy/"
urls.Homepage = "https://github.com/usnistgov/cmomy"

[dependency-groups]
dev = [
    { include-group = "mypy" },
    { include-group = "notebook" },
    { include-group = "nox" },
    { include-group = "pytest-accept" },
    { include-group = "test" },
    { include-group = "test-notebook" },
    { include-group = "typecheck" },
]
test = [
    "pytest-cov",
    "pytest-env",
    "pytest-sugar",
    { include-group = "pytest" },
    { include-group = "test-scipy" },
]
docs = [
    "autodocsumm",
    "myst-nb",
    "pyenchant",
    "sphinx>=5.3.0",
    "sphinx-autodoc-typehints",
    "sphinx-book-theme",
    "sphinx-copybutton",
    "sphinxcontrib-spelling",
]
# other packages/tools
ipython = [ "ipython" ]
mypy = [ "mypy>=1.15.0", "orjson" ]
notebook = [ "ipykernel", "nbclient" ]
nox = [ "nox>=2025.5.1" ]
pylint = [ "pylint" ]
pytest = [ "pytest" ]
pytest-accept = [ "pytest-accept" ]
# other environments
numpy1 = [ "numpy<2.0" ]
numpy2 = [ "numpy>2.0" ]
docs-live = [
    "sphinx-autobuild",
    { include-group = "docs" },
]
docs-spelling = [
    "pyenchant",
    "sphinxcontrib-spelling",
    { include-group = "docs" },
]
test-extras = [
    { include-group = "test" },
]
test-notebook = [
    "dask[diagnostics]",
    "nbval",
    { include-group = "test" },
]
test-scipy = [
    "dask; python_version=='3.13'",
    "scipy; python_version=='3.13'",
]
typecheck = [
    "pandas-stubs",
    { include-group = "pylint" },
    { include-group = "pytest" },
]

# * uv -------------------------------------------------------------------------

[tool.uv]
managed = true
default-groups = [ "dev", "numpy2" ]
fork-strategy = "requires-python"
conflicts = [
    [
        { group = "numpy1" },
        { group = "numpy2" },
    ],
]
required-version = ">=0.7.15"

[tool.uv.pip]
annotation-style = "line"
generate-hashes = true

[tool.uv.dependency-groups]
dev.requires-python = ">=3.13"
docs.requires-python = ">=3.13"
docs-live.requires-python = ">=3.13"
docs-spelling.requires-python = ">=3.13"
# other tools
ipython.requires-python = ">=3.13"
mypy.requires-python = ">=3.13"
notebook.requires-python = ">=3.13"
nox.requires-python = ">=3.13"

[tool.uv.build-backend]
source-include = [ "tests/**" ]
# source-include = [
#     "tests/**",
#     "examples/usage/**",
#     "docs/**",
#     "tools/**",
#     "requirements/**",
#     "changelog.d/**",
#     "*.md",
#     "*.py",
#     "ruff.toml",
#     "uv.lock",
#     "[jJ]ustfile",
#     ".cruft.json",
#     ".editorconfig",
#     ".markdownlint.yaml",
#     ".pre-commit-config.yaml",
#     ".prettierignore",
#     ".prettierrc.yaml",
#     ".pylintrc.toml",
#     ".python-version",
# ]
# source-exclude = [
#     "_build",
#     "docs/**/generated",
#     "docs/example/usage",
# ]

# * Checks ---------------------------------------------------------------------

[tool.nbqa.exclude]
codespell = "^examples/archived"

[tool.repo-review]
ignore = [
    "GH",    # enable for actions
    "PC140", # do this externally
    "PC170", # pygrep
    "PC901", # ci message
    "RTD",
]

[tool.check-wheel-contents]
toplevel = [
    "cmomy",
]
src_dir = [
    "src",
]
package_omit = [
    ".*",
    "*.pyc",
    "*.pyo",
    "*.nbc",
    "__pycache__/*",
    "*.egg-info",
]

[tool.pyproject-fmt]
max_supported_python = "3.13"

# * Testing --------------------------------------------------------------------

[tool.pytest.ini_options]
addopts = [
    "-ra",
    "--strict-config",
    "--strict-markers",
    "--doctest-modules",
    "--doctest-glob=*.md",
    "--pyargs",
    "--cov-config=pyproject.toml",
    # "--log-cli-level=INFO",
    # "-n",
    # "4",
]
testpaths = [
    "README.md",
    "cmomy",
    "tests",
]
markers = [
    "scipy: test scipy dependent code",
]
minversion = "8"
log_cli_level = "INFO"
xfail_strict = true
filterwarnings = [
    "error",
    "ignore: __array__ implementation doesn't accept a copy keyword:DeprecationWarning",
    "ignore: FNV hashing is not implemented in Numba:UserWarning",
    "ignore: Module cmomy was never imported:coverage.exceptions.CoverageWarning",       # test-notebook issue
    "ignore: No data was collected:coverage.exceptions.CoverageWarning",                 # test-notebook issue
]

[tool.pytest_env]
NUMBA_CACHE_DIR = { value = "{PWD}/.numba_cache", transform = true, skip_if_set = true }

[tool.coverage.run]
branch = true

[tool.coverage.report]
# show_missing = true
exclude_also = [
    "if TYPE_CHECKING:",
    "@overload",
]
omit = [
    "*/vendored/*",
    "*/options.py",
    # No great way to test coverage of guvectorized functions...
    "*/_lib/*.py",
    "*/core/typing_nested_sequence.py",
]
include = [
    "src/*",
]

[tool.coverage.paths]
source = [
    "src/",
    ".nox/**/site-packages/",
]

# * typecheck ---------------------------------------------------------------------

[tool.mypy]
files = [
    "src",
    "tests",
]
warn_unused_ignores = true
warn_return_any = true
warn_unused_configs = true
warn_unreachable = true
exclude = [
    ".eggs",
    ".tox",
    "doc",
    "docs",
    ".nox",
    ".numba_cache",
]
check_untyped_defs = true
strict = true
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
]
always_true = [ "MYPY_ONLY" ]
allow_redefinition_new = true
local_partial_types = true
# project specific
sqlite_cache = true
pretty = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
    "numba.*",
    "scipy.*",
    "scipy.special.*",

    "scipy.stats.*",
    "dask.*",
]

[[tool.mypy.overrides]]
strict = false
disallow_untyped_defs = false
disallow_untyped_calls = false
disallow_incomplete_defs = false
module = [
    "tests.*",
]

[[tool.mypy.overrides]]
disable_error_code = [
    "call-overload",
    "assignment",
    "arg-type",
]
module = [
    "tests._dataarray_set_utils.*",
    "tests.test_resample.*",
    "tests.test_utils.*",
    "tests.test_convert.*",
    "tests.test_rolling.*",
    "tests.test_xarray_support.*",
    "tests.test_reduce_validate.*",
    "tests.test_grouped.*",
    "tests.test_parallel_support.*",
    "tests.test_reduction.*",
]

# [[tool.mypy.overrides]]
# ignore_errors = true
# module = [  ]

# [[tool.mypy.overrides]]
# # mypy doesn't like how we handle default values of TypeVars
# disable_error_code = ["misc"]
# module = ["cmomy.*"]

[tool.pyright]
# Enable this option to pick out unused `# pyright: ignore[...]`
# reportUnnecessaryTypeIgnoreComment = true
defineConstant = { MYPY_ONLY = false }
include = [
    "src",
    "tests",
]
exclude = [
    "**/__pycache__",
    ".tox/**",
    ".nox/**",
    ".venv/**",
    "**/.mypy_cache",
    "**/.numba_cache",
    # "tools/auto_test_typing.py",
]
pythonVersion = "3.11"
typeCheckingMode = "standard"
strict = [
    "src/cmomy/*.py",
    "src/cmomy/core/*.py",
    "src/cmomy/grouped/*.py",
    "src/cmomy/resample/*.py",
    "src/cmomy/wrapper/*.py",
    "noxfile.py",
    "tools/*.py",
]
reportOverlappingOverload = true
reportPropertyTypeMismatch = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
# Extra flags
enableTypeIgnoreComments = false
reportUnnecessaryTypeIgnoreComment = true
reportUnreachable = "warning"

deprecateTypingAliases = true
enableReachabilityAnalysis = false
reportCallInDefaultInitializer = true
reportImplicitOverride = true
reportImportCycles = true
# reportMissingSuperCall = true
reportUninitializedInstanceVariable = true
reportUnusedCallResult = true

# type-checkers should type-check; linters should lint
reportImplicitStringConcatenation = false
reportPrivateUsage = false                # dupe of PLC2701
reportPrivateImportUsage = false          # dupe of PLC2701
reportUnusedImport = false                # dupe of F401
reportUnusedVariable = false              # dupe of F841

# Needed for pep728 support for TypeDict(closed=...)
enableExperimentalFeatures = true

[[tool.pyright.executionEnvironments]]
root = "tests"
reportCallIssue = false
reportArgumentType = false
reportMissingImports = false
reportUnusedCallResult = false

[[tool.pyright.executionEnvironments]]
root = "examples/usage"
reportUnusedCallResult = false

[tool.pytype]
inputs = [
    "src",
    "tests",
]

# * Dependency creation --------------------------------------------------------

[tool.pyproject2conda]
user-config = "config/userconfig.toml"
template-python = "requirements/py{py}-{env}"
template = "requirements/{env}"
name = "py{py}-{env}"
python = "default"
channels = "conda-forge"
style = "yaml"
deps = "pip"

[tool.pyproject2conda.dependencies]
pytest-accept = { pip = true }
lazy-loader = { skip = true, packages = "lazy_loader" }

[tool.pyproject2conda.envs.dev]
groups = [ "dev" ]
python = "default"

[tool.pyproject2conda.envs.test]
groups = [ "test" ]
python = "all"

[tool.pyproject2conda.envs.uvx-tools]
reqs = [
    # these used solely for specking tools to be used with uvx ...
    "conda-lock>=2.5.5",
    "cruft",
    "grayskull>=2.5.3",
    "nbqa>=1.8.4",
    "pre-commit>=4.0.0",
    "pre-commit-uv",
    "prek",
    "pyrefly",
    "pyright>=1.1.396",
    "basedpyright>=1.31.3",
    "scriv",
    "twine>=5.0.0",
    "ty",
]
groups = [
    "mypy",
    "nox",
]
skip-package = true
style = "requirements"

[tool.pyproject2conda.envs.test-extras]
groups = [ "test-extras" ]
skip-package = true
python = "all"

# * Other tools ----------------------------------------------------------------

[tool.scriv]
format = "md"
md_header_level = "2"
new_fragment_template = "file: changelog.d/templates/new_fragment.md.j2"

[tool.commitizen]
use_shortcuts = true

[tool.cruft]

[tool.typos.default.extend-words]
datas = "datas"

[tool.typos.default]
extend-ignore-identifiers-re = [ "NDArray.*" ]

[tool.typos.default.extend-identifiers]
NDGeneric = "NDGeneric"
