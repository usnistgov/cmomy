[build-system]
build-backend = "hatchling.build"
requires = [
    "hatch-fancy-pypi-readme",
    "hatch-vcs",
    "hatchling",
]

[project]
name = "cmomy"
description = "Central (co)moment calculation/manipulation"
keywords = [
    "cmomy",
]
license = { text = "NIST-PD" }
license-files = { paths = [
    "LICENSE",
] }
authors = [
    { name = "William P. Krekelberg", email = "wpk@nist.gov" },
]
requires-python = ">=3.8,<3.13"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "License :: Public Domain",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
]
dynamic = [
    "readme",
    "version",
]
dependencies = [
    "docstring-inheritance",
    "lazy-loader",
    "module-utilities>=0.6",
    "numba>=0.58",
    "numpy>1.24",
    "typing-extensions; python_version<'3.13'",
    "xarray>=0.16",
]
optional-dependencies.dev = [
    "cmomy[dev-extras,test,typing,pipxrun,nbval]",
]
optional-dependencies.dev-complete = [
    "cmomy[dev,tools]",
]
optional-dependencies.dev-extras = [
    "ipykernel",
    "ipython",
    "nbclient>=0.10.0",
    "nox>=2024.4.15",
    "pytest-accept",
]
optional-dependencies.docs = [
    "autodocsumm",
    "myst-nb",
    "pyenchant",
    "sphinx>=5.3.0",
    "sphinx-autobuild",
    "sphinx-autodoc-typehints",
    "sphinx-book-theme",
    "sphinx-copybutton",
    "sphinxcontrib-spelling",
]
optional-dependencies.mypy = [
    "mypy>=1.10.0",
]
optional-dependencies.nbval = [
    "nbval",
]
optional-dependencies.pipxrun = [
    # Anything needed to run tools/pipxrun.py
    "packaging",
]
optional-dependencies.pipxrun-tools = [
    # these used solely for specking tools to be used with tools/pipxrun.py
    "cmomy[mypy]",
    "conda-lock>=2.5.5",
    "grayskull>=2.5.3",
    "nbqa>=1.8.4",
    "pyright>=1.1.367",
    "twine>=5.0.0",
]
optional-dependencies.test = [
    "pytest",
    "pytest-cov",
    "pytest-sugar",
    "pytest-xdist",
]
optional-dependencies.tools = [
    "pipx",
    "pre-commit",
    "scriv",
]
optional-dependencies.typing = [
    "cmomy[pipxrun]",
    "pandas-stubs",
    "pytest",
]
urls.Documentation = "https://pages.nist.gov/cmomy/"
urls.Homepage = "https://github.com/usnistgov/cmomy"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build]
exclude = [
    ".*_cache",
]

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"
fragments = [
    { path = "README.md" },
    { path = "CHANGELOG.md" },
    { path = "LICENSE" },
]

# * Linting --------------------------------------------------------------------

[tool.ruff]
line-length = 88
extend-include = [
    "*.ipynb",
]
extend-exclude = [
    ".numba_cache",
    ".venv",
    "dist-conda",
    "examples/archived",
    # "tests/",
    # "src/cmomy/tests",
]
fix = true
unsafe-fixes = true

format.docstring-code-format = true
lint.select = [
    "ALL",
]
lint.ignore = [
    # * Annotations
    "ANN101", # - Leads to issues with methods and self
    "ANN102", # - Leads to issues with classmethods and cls
    "ANN401", # - Any ok sometimes
    # * These conflict with formatter
    "COM", # - flake8-commas, formatter should take care of this?
    "CPY", # - Don't require copyright
    # * Docstrings
    "D105", # - Missing magic method docstring
    # * Not a fan of these.  And lead to issues with docfiller
    "D107", # - Missing docstring in __init__
    "D203", # - 1 blank line required before class docstring
    "D205", # - blank line after summary
    "D212", # - Multi-line docstring summary should start at the first line
    # * This leads to errors with placing titles in module
    "D400", # - First line should end with a period
    "D401", # - First line of docstring should be in imperative mood: "{first_line}"
    "D415", # - First line should end with a period, question mark, or exclamation point
    "D417", # - Missing argument description in the docstring for {definition}: {name} (bad with docfiller)
    "E402", # - module level import not at top of file
    # * Other
    "E501", # - line too long - let formatter fix this
    "E731", # - do not assign a lambda expression, use a def
    "ERA",  # - eradicate (want to keep some stuff)
    "FBT",  # - bools are ok
    "ISC",  # - flake8-implicit-str-concat
    # * Allow non top level imports
    "PLC0415", # - import should be at top level (leads to issues with imports in func?)
    "TID252",  # - Allow relative imports
]
# Use extend-ignore for project specific ignores (avoid changing ignore directly)
lint.extend-ignore = [
    # "PD",        # - not using pandas?
    # "NPY",       # - not using numpy?
    # * Annotations
    # "SLF001",  # - flake8-self (private access sometimes OK)
    # "ANN",     # - Annotations (just use mypy/pyright)
    # * pylint
    # "PLR2004", # - numbers in comparison sometimes ok
    # "PLR0913", # - complexity sometimes ok
    # "PLR0917", # - complexity sometimes ok
    # * Docstrings ymmv
    # "D102",    # - Missing docstring in public method
    # "D103",    # - Missing docstring in public function
    # "D202",    # - blank line after docstring
]
lint.per-file-ignores."**/*.ipynb" = [
    "B018",
    "D100",
    "INP001",
]
lint.per-file-ignores."conftest.py" = [
    "ANN",
    "ARG",
    "D",
    "PT",
]
lint.per-file-ignores."docs/conf.py" = [
    "INP001",
]
lint.per-file-ignores."noxfile.py" = [
    "RUF009",
]
lint.per-file-ignores."tests/*.py" = [
    "D",
    "S101",
]
lint.per-file-ignores."tools/*.py" = [
    "A",
    "D102",
    "S",
    "SLF001",
]
lint.extend-per-file-ignores."**/*.ipynb" = [
    "ANN",
    "D103",
    "E302",
    "E305",
    "PD013",
    "PLR2004",
    "T201",
]
lint.extend-per-file-ignores."classic_tests/**/*.py" = [
    "ANN",
    "D",
    "FIX002",
    "N802",
    "N806",
    "PLC2701",
    "PLR0904",
    "PLR2004",
    "PT011",
    "S101",
    "SLF001",
    "TD003",
]
lint.extend-per-file-ignores."src/**/*.py" = [
    "D102",
    "FIX002",
    "PLR2004",
    "TD003",
]
lint.extend-per-file-ignores."src/**/_formatting.py" = [
    "SLF001",
]
lint.extend-per-file-ignores."src/**/_lib/*.py" = [
    "ANN",
    "N803",
    "PLR0914",
    "PLR2004",
    "S101",
]
lint.extend-per-file-ignores."src/**/_lib/convert.py" = [
    "PLR1702",
]
lint.extend-per-file-ignores."src/**/_testing.py" = [
    "S101",
]
lint.extend-per-file-ignores."src/**/_{formatting,testing}.py" = [
    "ANN",
]
lint.extend-per-file-ignores."src/**/abstract_central.py" = [
    "PLR2004",
]
lint.extend-per-file-ignores."src/**/central.py" = [
    "D102",
    "PLR2004",
]
# Project specific ignores (avoid changing per-file-ignores directly)
lint.extend-per-file-ignores."tests/**/*.py" = [
    "ANN",
    "FIX002",
    "N802",
    "N806",
    "PLC2701",
    "PLR0904",
    "PLR2004",
    "PT011",
    "SLF001",
    "TD003",
]
# fixable = ["ALL"]
lint.unfixable = [
    "PLR6104",
    "T",
]
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
lint.isort.known-first-party = [
    "cmomy",
]
lint.pydocstyle.convention = "numpy"
lint.pylint.max-args = 15
lint.pylint.max-positional-args = 15
lint.pylint.max-public-methods = 30
lint.preview = true

[tool.nbqa.exclude]
codespell = "^examples/archived"

[tool.check-wheel-contents]
toplevel = [
    "cmomy",
]
src_dir = [
    "src",
]
package_omit = [
    ".*",
    "*.pyc",
    "*.pyo",
    "*.nbc",
    "__pycache__/*",
    "*.egg-info",
]

# * Testing --------------------------------------------------------------------

[tool.pytest.ini_options]
addopts = [
    "--doctest-modules",
    "--doctest-glob=*.md",
    "--pyargs",
    "--cov-config=pyproject.toml",
    # "--log-cli-level=INFO",
    # "-n",
    # "4",
]
testpaths = [
    "README.md",
    "cmomy",
    "tests",
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
# show_missing = true
exclude_also = [
    "if TYPE_CHECKING:",
    "@overload",
]
omit = [
    "*/vendored/*",
    "*/_typing.py",
    "*/options.py",
    "*/_lib/_push*.py",
    "*/_lib/push*.py",
    "*/_lib/convert*.py",
    "*/_lib/decorators.py",
    "*/_lib/indexed*.py",
    "*/_lib/make_parallel_files.py",
    "*/_lib/resample*.py",
    "*/_lib/utils.py",
    "*/_typing_nested_sequence.py",
]
include = [
    "src/*",
]

[tool.coverage.paths]
source = [
    "src/",
    ".nox/**/site-packages/",
]

# * Typing ---------------------------------------------------------------------

[tool.mypy]
files = [
    "src",
    "tests",
]
show_error_codes = true
warn_unused_ignores = true
warn_return_any = true
warn_unused_configs = true
exclude = [
    ".eggs",
    ".tox",
    "doc",
    "docs",
    ".nox",
    ".numba_cache",
]
check_untyped_defs = true
strict = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
    "numba.*",
]

[[tool.mypy.overrides]]
ignore_errors = true
module = [
]

[tool.pyright]
include = [
    "src",
    "tests",
]
strict = [
    "noxfile.py",
    "tools/*.py",
    "src/cmomy/__init__.py",
    "src/cmomy/_compat.py",
    # "src/cmomy/_formatting.py",
    "src/cmomy/_typing_compat.py",
    # "src/cmomy/_typing_nested_sequence.py",
    "src/cmomy/_central_abc.py",
    "src/cmomy/_central_dataarray.py",
    "src/cmomy/_central_numpy.py",
    "src/cmomy/convert.py",
    "src/cmomy/compile.py",
    "src/cmomy/docstrings.py",
    "src/cmomy/options.py",
    "src/cmomy/random.py",
    "src/cmomy/reduction.py",
    "src/cmomy/resample.py",
    "src/cmomy/typing.py",
    "src/cmomy/utils.py",
    "src/cmomy/_lib/factory.py",
]
exclude = [
    "**/__pycache__",
    ".tox/**",
    ".nox/**",
    ".venv/**",
    "**/.mypy_cache",
    "**/.numba_cache",
]
# strict = ["src", "tests", "noxfile.py", "tools/*.py"]
pythonVersion = "3.11"
typeCheckingMode = "basic"
# enable subset of "strict"
reportDuplicateImport = true
reportInvalidStubStatement = true
reportOverlappingOverload = true
reportPropertyTypeMismatch = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
reportUntypedNamedTuple = true
reportUnusedImport = true
# disable subset of "basic"
reportGeneralTypeIssues = false
reportMissingModuleSource = false
reportOptionalCall = false
reportOptionalIterable = false
reportOptionalMemberAccess = false
reportOptionalOperand = false
reportOptionalSubscript = false
reportPrivateImportUsage = false
reportUnboundVariable = false

[tool.pytype]
inputs = [
    "src",
    "tests",
]

# * Dependency creation --------------------------------------------------------

[tool.pyproject2conda]
user_config = "config/userconfig.toml"
template_python = "requirements/py{py}-{env}"
template = "requirements/{env}"
python = [
    "3.11",
]
channels = [
    "conda-forge",
]
style = [
    "yaml",
    "requirements",
]
default_envs = [
    "test",
    "typing",
    "docs",
    "dev",
    "dev-complete",
]

[tool.pyproject2conda.dependencies]
pytest-accept = { pip = true }
scriv = { pip = true }
lazy-loader = { skip = true, packages = "lazy_loader" }

[tool.pyproject2conda.envs.build]
extras = "build-system.requires"
reqs = [
    "build",
]
base = false
style = "requirements"

[tool.pyproject2conda.envs.pipxrun-tools]
extras = "pipxrun-tools"
base = false
style = "requirements"

[tool.pyproject2conda.envs.test-extras]
extras = [
    "test",
]
base = false

[tool.pyproject2conda.envs.test-notebook]
extras = [
    "test",
    "nbval",
]

[[tool.pyproject2conda.overrides]]
# Ensure these have pip in yaml file
envs = [
    "test",
    "docs",
    "dev",
    "dev-complete",
]
deps = [
    "pip",
]

[[tool.pyproject2conda.overrides]]
envs = [
    "test",
    "typing",
    "test-extras",
]
python = [
    "3.8",
    "3.9",
    "3.10",
    "3.11",
    "3.12",
]

[tool.pip-tools]
allow-unsafe = true
strip-extras = true

# * Other tools ----------------------------------------------------------------

[tool.scriv]
format = "md"
md_header_level = "2"
new_fragment_template = "file: changelog.d/templates/new_fragment.md.j2"

[tool.commitizen]
use_shortcuts = true

[tool.cruft]

[tool.typos.default.extend-words]
datas = "datas"

[tool.typos.default.extend-identifiers]
NDArrayAny = "NDArrayAny"
